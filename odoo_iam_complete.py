#!/usr/bin/env python3
"""
Script principal du syst√®me de provisionnement IAM pour Odoo - Partie 1
Script unifi√© incluant toutes les fonctionnalit√©s et modes de fonctionnement

Usage:
    python3 odoo_iam_complete.py --demo         # Mode d√©monstration
    python3 odoo_iam_complete.py --test         # Tests syst√®me
    python3 odoo_iam_complete.py --import       # Import r√©el (Odoo requis)
    python3 odoo_iam_complete.py --help         # Aide

Auteur: Syst√®me IAM Odoo - Partie 1
Date: 2025-05-28
"""

import sys
import argparse
import subprocess
import os

# Import conditionnel pour √©viter les erreurs
try:
    from odoo_user_provisioning import OdooUserProvisioning
except ImportError:
    print("‚ö†Ô∏è Module odoo_user_provisioning non trouv√©")
    OdooUserProvisioning = None

try:
    from demo_iam_system import OdooIAMDemo
except ImportError:
    print("‚ö†Ô∏è Module demo_iam_system non trouv√©") 
    OdooIAMDemo = None

class OdooIAMManager:
    """Gestionnaire principal du syst√®me IAM Odoo"""
    
    def __init__(self):
        if OdooIAMDemo:
            self.demo = OdooIAMDemo()
        else:
            self.demo = None
            
        if OdooUserProvisioning:
            self.provisioning = OdooUserProvisioning()
        else:
            self.provisioning = None
    
    def run_demo(self):
        """Lance la d√©monstration compl√®te"""
        print("üé≠ MODE D√âMONSTRATION - Syst√®me IAM Odoo")
        print("=" * 60)
        self.demo.demo_csv_import("utilisateurs.csv")
    
    def run_tests(self):
        """Lance les tests du syst√®me"""
        print("üß™ MODE TESTS - Syst√®me IAM Odoo")
        print("=" * 60)
        subprocess.run([sys.executable, "test_odoo_connection.py"])
    
    def run_import(self):
        """Lance l'import r√©el"""
        print("üöÄ MODE IMPORT R√âEL - Syst√®me IAM Odoo")
        print("=" * 60)
        print("‚ö†Ô∏è  ATTENTION: Cette op√©ration va cr√©er des utilisateurs r√©els dans Odoo!")
        
        response = input("Voulez-vous continuer? (oui/non): ")
        if response.lower() in ['oui', 'o', 'yes', 'y']:
            self.provisioning.import_accounts_from_csv("utilisateurs.csv")
        else:
            print("‚ùå Import annul√© par l'utilisateur")
    
    def show_help(self):
        """Affiche l'aide du syst√®me"""
        help_text = """
üèóÔ∏è  SYST√àME DE PROVISIONNEMENT IAM POUR ODOO - PARTIE 1
=========================================================

üìã DESCRIPTION:
Ce syst√®me automatise la gestion des utilisateurs Odoo via:
- Import depuis fichiers CSV
- Cr√©ation automatique des comptes
- Attribution des r√¥les et permissions
- G√©n√©ration de mots de passe s√©curis√©s
- Notifications email
- Logging complet des op√©rations

üöÄ MODES D'UTILISATION:

1. MODE D√âMONSTRATION (--demo)
   ‚Ä¢ Simule toutes les fonctionnalit√©s sans Odoo
   ‚Ä¢ Parfait pour comprendre le fonctionnement
   ‚Ä¢ G√©n√®re des logs de d√©monstration

2. MODE TESTS (--test)
   ‚Ä¢ Valide la configuration et les d√©pendances
   ‚Ä¢ Teste la connectivit√© Odoo
   ‚Ä¢ V√©rifie la structure des fichiers CSV

3. MODE IMPORT R√âEL (--import)
   ‚Ä¢ Effectue l'import r√©el dans Odoo
   ‚Ä¢ N√©cessite une instance Odoo op√©rationnelle
   ‚Ä¢ Cr√©e les utilisateurs et assigne les permissions

üìÅ FICHIERS PRINCIPAUX:
‚Ä¢ odoo_user_provisioning.py - Syst√®me principal
‚Ä¢ utilisateurs.csv - Donn√©es d'exemple
‚Ä¢ config.py - Configuration syst√®me
‚Ä¢ odoo_provisioning.log - Logs d'ex√©cution

‚öôÔ∏è  CONFIGURATION:
1. √âditez config.py avec vos param√®tres Odoo
2. Configurez les param√®tres SMTP pour les emails
3. Adaptez utilisateurs.csv avec vos donn√©es

üîß PR√âREQUIS:
‚Ä¢ Python 3.8+
‚Ä¢ Packages: requests, pandas
‚Ä¢ Odoo 14+ (pour le mode import r√©el)

üìñ EXEMPLES:
    python3 odoo_iam_complete.py --demo    # D√©monstration
    python3 odoo_iam_complete.py --test    # Tests
    python3 odoo_iam_complete.py --import  # Import r√©el

üîç STRUCTURE CSV REQUISE:
nom,prenom,numero_utilisateur,login,email,adresse,droits

üè∑Ô∏è  R√îLES SUPPORT√âS:
‚Ä¢ Administration
‚Ä¢ Ventes  
‚Ä¢ Comptabilit√©
‚Ä¢ Ressources Humaines

üìû SUPPORT:
Ce syst√®me fait partie du projet IAM Odoo en 3 parties:
- Partie 1: Provisionnement automatique (ACTUEL)
- Partie 2: Modification et gestion (√Ä VENIR)
- Partie 3: API REST et interface web (√Ä VENIR)
        """
        print(help_text)
    
    def show_status(self):
        """Affiche le statut du syst√®me"""
        print("üìä STATUT DU SYST√àME IAM ODOO")
        print("=" * 40)
        
        # V√©rification des fichiers
        import os
        files_to_check = [
            "odoo_user_provisioning.py",
            "utilisateurs.csv", 
            "config.py",
            "test_odoo_connection.py"
        ]
        
        print("üìÅ Fichiers syst√®me:")
        for file in files_to_check:
            if os.path.exists(file):
                print(f"   ‚úÖ {file}")
            else:
                print(f"   ‚ùå {file} - MANQUANT")
        
        # V√©rification des d√©pendances
        print("\nüì¶ D√©pendances Python:")
        try:
            import requests
            print("   ‚úÖ requests")
        except ImportError:
            print("   ‚ùå requests - NON INSTALL√â")
        
        try:
            import pandas
            print("   ‚úÖ pandas")
        except ImportError:
            print("   ‚ùå pandas - NON INSTALL√â")
        
        # Test de connexion Odoo (rapide)
        print("\nüîó Connectivit√© Odoo:")
        uid = self.provisioning.authenticate()
        if uid:
            print(f"   ‚úÖ Connexion OK (UID: {uid})")
        else:
            print("   ‚ùå Connexion impossible")
            print("     ‚Üí V√©rifiez que Odoo est d√©marr√©")
            print("     ‚Üí V√©rifiez la configuration dans config.py")


def main():
    """Fonction principale"""
    parser = argparse.ArgumentParser(
        description="Syst√®me de provisionnement IAM pour Odoo - Partie 1",
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    
    parser.add_argument('--demo', action='store_true', 
                       help='Mode d√©monstration (sans Odoo)')
    parser.add_argument('--test', action='store_true',
                       help='Lance les tests du syst√®me')
    parser.add_argument('--import', action='store_true',
                       help='Import r√©el dans Odoo')
    parser.add_argument('--status', action='store_true',
                       help='Affiche le statut du syst√®me')
    
    args = parser.parse_args()
    
    manager = OdooIAMManager()
    
    if args.demo:
        manager.run_demo()
    elif args.test:
        manager.run_tests()
    elif getattr(args, 'import'):
        manager.run_import()
    elif args.status:
        manager.show_status()
    else:
        manager.show_help()


if __name__ == "__main__":
    main()
